<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Data Transfer Object handling by the Dto Handler</title>
        <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    </head>
    <body class="container my-5">
        <div class="row">
            <form id="form" class="col-12">
                <h1>Input data</h1>

                <div class="form-group">
                    <label for="method">Choose the method</label>
                    <select id="method" class="form-control">
                        <option value="with-validation">With validation</option>
                        <option value="handled-validation">With handled validation</option>
                        <option value="without-validation">Without validation</option>
                    </select>
                </div>
                <hr>
                <div class="form-group">
                    <label for="name">Name (String and not blank)</label>
                    <input type="text" id="name" class="form-control">
                </div>
                <div class="form-group">
                    <label for="age">Age (Integer and less than 100)</label>
                    <input type="number" id="age" class="form-control">
                </div>
                <div class="form-check">
                    <input type="checkbox" id="is_beautiful" class="form-check-input">
                    <label for="is_beautiful" class="form-check-label">Is beautiful ?</label>
                </div>
                <div class="form-group">
                    <label for="links">Linked to (Maximum 2)</label>
                    <select id="links" class="form-control" multiple>
                        {% for entity in entities %}
                            <option value="{{ entity.getId() }}">
                                ({{ entity.getId() }}) {{ entity.getName() }}
                            </option>
                        {% endfor %}
                    </select>
                </div>

                <button type="submit" class="btn btn-primary">Submit</button>
            </form>
        </div>

        <hr class="m-5">

        <div class="row">
            <div class="col-12">
                <h1 class="mb-3">
                    Response <span id="responseStatus"></span>
                </h1>

                <code id="responseContent" style="white-space: pre-wrap;"></code>
            </div>
        </div>

        <script>
            function setContent(id, content) {
                let object = document.getElementById(id);

                if (object === null) {
                    return;
                }

                object.innerText = content;
            }

            function getValue(id) {
                let object = document.getElementById(id);

                if (object === null) {
                    return;
                }

                if (object.options && object.attributes.multiple) {
                    let values = [];

                    for (let i=0; i<object.options.length; i++) {
                        let option = object.options[i];

                        if (object.options[i].selected) {
                            values.push(option.value);
                        }
                    }

                    return values;
                }

                if (object.type === 'checkbox') {
                    return object.checked;
                }

                if (object.type === 'number') {
                    return parseInt(object.value);
                }

                return object.value;
            }

            function postAjax(url, data, callback) {
                let xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
                xhr.open('POST', url);
                xhr.onreadystatechange = function() {
                    if (xhr.readyState > 3) { callback(xhr); }
                };
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify(data));
                return xhr;
            }

            function submit(e) {
                if (e.preventDefault()) {
                    e.preventDefault();
                }

                let data = {
                    name: getValue('name'),
                    age:  getValue('age'),
                    isBeautiful: getValue('is_beautiful'),
                    links: getValue('links'),
                };

                postAjax(/rest/ + getValue('method'), data, function (response) {
                    console.log(response);
                    setContent('responseStatus', '(' + response.status + ')');
                    setContent(
                        'responseContent',
                        JSON.stringify(
                            JSON.parse(response.responseText),
                            null,
                            4
                        )
                    );
                }, );

                return false;
            }

            let form = document.getElementById('form');
            form.addEventListener('submit', submit);
        </script>
    </body>
</html>